#!/bin/sh

export SHARED_BASE="/data"

constract_version () {
        repo_path=$1

        # Check if the current branch is the same as the branch to build
        git -C "$repo_path" checkout "${BRANCH}"

        # Get the last semver tag
        l_tag=$(git -C "$repo_path" tag --list --sort=-v:refname 'v[0-9]*\.[0-9]*\.[0-9]*' | head -n 1)

        # Check if the tag exists
        if [ -z "$l_tag" ]; then
          echo "No semver tag found in this repository."
          exit 1
        fi

        # Check if the tagged commit is in the current branch
        # BRANCH=$(git branch --show-current)
        if ! git -C "$repo_path" branch --contains "$l_tag" | grep -E -q "^(\* )?$BRANCH"; then
          echo "The last semver tagged commit ($l_tag) is not in the current branch ($BRANCH)."
          exit 1
        fi

        # Check that no code diff between tagged commit and last commit in this branch
        if ! git -C "$repo_path" diff --exit-code "$l_tag" HEAD >/dev/null 2>&1; then
          echo "There is a code difference between the last semver tagged commit ($l_tag) and the last commit in this branch ($BRANCH)."
          exit 1
        else
          echo "No code difference between the last semver tagged commit ($l_tag) and the last commit in this branch ($BRANCH)."
        fi

        # Export the new version
        if [ "$BRANCH" = "prod" ]; then
          PACKAGE_VERSION="${l_tag}"
        else
          PACKAGE_VERSION="${l_tag}-${BRANCH}"
        fi

        if [ -n "${VERMETADATA}" ] && [ "${VERMETADATA}" != "-" ]; then
          export PACKAGE_VERSION="${PACKAGE_VERSION}+${VERMETADATA}"
        else 
          export PACKAGE_VERSION="${PACKAGE_VERSION}"
        fi

        # File to store the execution count for each input value.
        history_file="$SHARED_BASE/history.txt"

        # Create the history file if it doesn't exist.
        if [ ! -f "$history_file" ]; then
          touch "$history_file"
        fi

        # Extract the execution count for the input value from the history file, defaulting to 0
        count=$(grep -oE "^$l_tag [0-9]+" "$history_file" | awk '{print $2}')

        # Increment the count and write the updated history line to the file
        if [ -n "$count" ]; then
                new_count=$((count + 1))
                sed -i "s/^$l_tag [0-9]\+/$l_tag $new_count/" "$history_file"
                export PACKAGE_RELEASE="${new_count}" 
        else
                echo "$l_tag 0" >> "$history_file"
                unset PACKAGE_RELEASE
        fi

}

if [ "$1" = "pkg" ]; then
        set -e

        export USER_UID="${USER_UID}"
        export BRANCH="${BRANCH}"
        export VERMETADATA="${VERMETADATA}"
        export CGO_ENABLED=0
        export GIT_USER="${GIT_USER}"
        export GIT_PASSWORD="${GIT_PASSWORD}"

        if [ -z "${BRANCH}" ]; then
                echo "No branch specified"
                exit 1
        fi

        git config --global credential.helper "!f() { echo \"username=${GIT_USER}\"; echo \"password=${GIT_PASSWORD}\"; }; f"
        go env -w GOPRIVATE=github.com/vpngen

        git clone https://github.com/vpngen/cert-vpn-works-builder
        
        constract_version "cert-vpn-works-builder"

        go install github.com/goreleaser/nfpm/v2/cmd/nfpm@latest

        nfpm package --config "${SHARED_BASE}/nfpm.yaml" --target "${SHARED_BASE}/pkg" --packager deb

        chown "${USER_UID}":"${USER_UID}" "${SHARED_BASE}/pkg/"*.deb

        exit 0
fi


CERTNAME=${CERTNAME:-"vpn.works"}

CONFDIR=${CONFDIR:-"${HOME}/.vgconfigs/.vpn.works.certs"}

SERVER=${SERVER:-"$(cat "${CONFDIR}/.server")"}
CREDENTIALS=${CREDENTIALS:-"$(cat "${CONFDIR}/.credentials")"}

# shellcheck disable=SC2174
if [ ! -d "${CONFDIR}" ]; then
        mkdir -p "${CONFDIR}" -m 0700
fi

if [ "${SERVER}" != "-" ]; then
        if curl -q -k -u "${CREDENTIALS}" --basic "${SERVER}/vpn.works.key" -o "${CONFDIR}/vpn.works.key.tmp"; then
                mv -f "${CONFDIR}/vpn.works.key.tmp" "${CONFDIR}/vpn.works.key"
        fi

        if curl -q -k -u "${CREDENTIALS}" --basic "${SERVER}/vpn.works.crt" -o "${CONFDIR}/vpn.works.crt.tmp"; then
                mv -f "${CONFDIR}/vpn.works.crt.tmp" "${CONFDIR}/vpn.works.crt"
        fi
else 
        openssl req \
                -x509 \
                -nodes \
                -days 10000 \
                -newkey ec \
                -pkeyopt ec_paramgen_curve:prime256v1 \
                -subj "/CN=${CERTNAME}/O=VPNGen/C=LT/ST=Vilniaus Apskritis/L=Vilnius" \
                -keyout "${CONFDIR}/${CERTNAME}.key" \
                -out "${CONFDIR}/${CERTNAME}.crt"
fi

if [ -f "${CONFDIR}/CHECKSUM" ]; then
        if sha256sum -c "${CONFDIR}/CHECKSUM"; then
                exit 0
        fi
fi

sha256sum "${CONFDIR}/${CERTNAME}.crt" >  "${CONFDIR}/CHECKSUM"
sha256sum "${CONFDIR}/${CERTNAME}.key" >> "${CONFDIR}/CHECKSUM"

# Get the current branch
BRANCH=$(git branch --show-current)

if [ -z "${VERMETADATA}" ]; then
        VERMETADATA=$(hostname)
        VERMETADATA=${VERMETADATA%%.*}
fi

GIT_USER=${GIT_USER:-git}
GIT_PASSWORD=${GIT_PASSWORD:-"$(cat ~/.github_token)"}

docker run --rm \
        -e USER_UID="$(id -u)" \
        -e BRANCH="${BRANCH}" \
        -e VERMETADATA="${VERMETADATA}" \
        -v "${CONFDIR}":/etc/vgconf \
        -e GIT_USER="${GIT_USER}" \
        -e GIT_PASSWORD="${GIT_PASSWORD}" \
        -v "${PWD}":"${SHARED_BASE}" \
        golang:1.20 "${SHARED_BASE}/build" pkg


